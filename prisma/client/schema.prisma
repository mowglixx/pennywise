// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../../prisma/client"
  previewFeatures = ["prismaSchemaFolder"]
}

model User {
  id                     String    @id @default(uuid()) @db.Uuid
  createdAt              DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime  @updatedAt @db.Timestamptz(6)
  email                  String    @unique @db.VarChar(255)
  emailVerificationToken String?   @unique
  emailVerified          DateTime?
  firstName              String    @db.VarChar(50)
  lastName               String    @db.VarChar(50)
  password               String?
  phoneNumber            String?   @db.VarChar(20)
  profileImageId         String?   @unique @db.Uuid
  resetToken             String?   @unique
  resetTokenExpiry       DateTime?
  stripeCustomerId       String?

  accounts      Account[]
  authenticator Authenticator[]
  sessions      Session[]

  @@map("user")
}

model Account {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  accessToken       String? @db.Text
  expiresAt         Int?
  idToken           String? @db.Text
  provider          String
  providerAccountId String
  refreshToken      String?
  scope             String?
  sessionState      String?
  tokenType         String?
  userId            String  @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

enum AccountProvider {
  GOOGLE
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationRequest {
  id         String   @id @default(uuid()) @db.Uuid
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}
